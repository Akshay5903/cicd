# This is a basic workflow to help you get started with Action

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    paths-ignore:
        - '**.yml'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          ref: commitBranch
      - name: setting first github successtoken
        run: |
          #echo y | node_modules/sfdx-cli/bin/run plugins:install sfdx-git-delta
          pwd
          mkdir -p recentCommit
          #cd recentCommit
          cp recentSuccessfulCommit.TXT /home/runner/work/lastRecentCommit.txt
      - uses: actions/checkout@v2
        with:
          ref: main
          fetch-depth: 0
      - name: Install Salesforce CLI
        run: |
          npm install sfdx-cli
          node_modules/sfdx-cli/bin/run --version
          node_modules/sfdx-cli/bin/run plugins --core
      - name: Checkout
        run: |
          #cd /home/runner/work
          SCRIPTFILE='/home/runner/work/lastRecentCommit.txt'
          PREVRSA=$(<$SCRIPTFILE)
          echo prev Commit $PREVRSA
          echo current Commit $GITHUB_SHA
          git fsck
          git fetch --tags --force --progress -- https://github.com/Akshay5903/cicd.git +refs/heads/*:refs/remotes/origin/* # timeout=10
          git rev-parse "refs/remotes/origin/main^{commit}" # timeout=10
          #git pull
          git diff-tree -r $GITHUB_HEAD_REF $PREVRSA 
          echo y | node_modules/sfdx-cli/bin/run plugins:install sfdx-git-delta
          
          git diff-tree --no-commit-id --name-only -r ${{ github.sha }} $PREVRSA
          node_modules/sfdx-cli/bin/run sgd:source:delta --to $GITHUB_SHA --from $PREVRSA --output "."
          ls -a
          cd package
          cat package.xml
          cd ..
          node_modules/sfdx-cli/bin/run force:source:convert --manifest=/home/runner/work/cicd/cicd/package/package.xml --outputdir=convert
          ls -a
          cd convert
          ls -a
          cat package.xml
      - name: Authenticating Target Org
        run: |
          echo "${SALESFORCE_JWT_SECRET_KEY}" > server.key
          node_modules/sfdx-cli/bin/run force:auth:jwt:grant --clientid ${{ secrets.SALESFORCE_CONSUMER_KEY }} --jwtkeyfile server.key --username ${{ secrets.SALESFORCE_DEVHUB_USERNAME}} --setdefaultdevhubusername -a devhub
        env:
          SALESFORCE_JWT_SECRET_KEY: ${{ secrets.SALESFORCE_JWT_SECRET_KEY }}
      - name: Validating Deployment
        run: |
          pwd
          ls -a
          node_modules/sfdx-cli/bin/run force:source:deploy -x /home/runner/work/cicd/cicd/convert/finalpackage.xml -u ${{ secrets.SALESFORCE_DEVHUB_USERNAME}} --checkonly 
#       - name: Install Salesforce CLI
#         run: |
#           npm install sfdx-cli
#           node_modules/sfdx-cli/bin/run --version
#           node_modules/sfdx-cli/bin/run plugins --core  
          
#       - uses: actions/checkout@v2
#         with:
#           ref: commitBranch
#       - name: setting first github successtoken
#         run: |
#           echo y | node_modules/sfdx-cli/bin/run plugins:install sfdx-git-delta
#           cp recentSuccessfulCommit.TXT lastRecentCommit.txt
#           rm -rf C:/Windows/System32/config/systemprofile/AppData/Local/Jenkins/.jenkins/workspace/CICDPipeline/package
#           echo y | sfdx plugins:install sfdx-git-delta
#           sfdx sgd:source:delta --to $LCOMMIT --from $PREVRSA --output "."
#           echo removing existing deployment folder
#           rm -rf C:/Windows/System32/config/systemprofile/AppData/Local/Jenkins/.jenkins/workspace/CICDPipeline/convert
#           echo creating Deployment Package
#           sfdx force:source:convert --manifest=C:/Windows/System32/config/systemprofile/AppData/Local/Jenkins/.jenkins/workspace/CICDPipeline/package/package.xml --outputdir=convert

#           ls -a
#           echo "19bcdeb8f93f9351cf88ae019704a587cb4c6419" > recentSuccessfulCommit.TXT
#           git config --global user.email "akshay.shar2019@gmail.com"
#           git config --global user.name "Akshay5903"
#           git add --all
#           git commit -m "Push All"
#           git push
          
          
