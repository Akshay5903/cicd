# This is a basic workflow to help you get started with Actions test

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  #push:
  #  branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: sfdx-actions/setup-pmd@v1
      #- uses: legetz/setup-pmd@v6.30
      
      
        

      
      
      
      #- name: trigger single Job
      #  uses: appleboy/jenkins-action@master
      #  with:
      #    url: "http://ec2-52-3-254-93.compute-1.amazonaws.com:8080/"
      #    user: "admin"
      #    token: ${{ secrets.JENKINSTOKEN }}
      #    job: "CICDPullRequestValidator"
      
      
      - name: print-diff
        shell: bash
        run: |
          pwd
          ls -a
          sudo apt-get update
          sudo apt-get install xmlstarlet
          sudo apt-get install mailutils
          #sudo apt-get install -y apex-pmd
          git fetch origin main
          git diff --name-only origin/main..HEAD > mydiff
          
          echo "mydiff = "
          cat mydiff
          mkdir -p src
          mkdir -p pmdClass
          echo changing directoy to src
          cd src
          echo '<?xml version="1.0" encoding="UTF-8"?>
          <Package>
          </Package>' > package.xml
          
          
          cd ..
          DIRDEPLOY=build/deploy
          if [ -d "$DIRDEPLOY" ]; then
              echo Removing deploy folder
              rm -rf "$DIRDEPLOY"
          fi
          mkdir -p $DIRDEPLOY
          
          
          git diff --name-only origin/main..HEAD | \
          while read -r CFILE; do

                  if [[ $CFILE == *"src/"*"."* ]]
                  then
                          echo if1
                          tar cf - "../$CFILE"* | (cd ../$DIRDEPLOY; tar xf -)
                  fi
                  if [[ $CFILE == *"-meta.xml" ]]
                  then
                          echo if2
                          ADDFILE=$CFILE
                          ADDFILE="${ADDFILE%-meta.xml*}"
                          tar cf - ../$ADDFILE | (cd ../$DIRDEPLOY; tar xf -)
                  fi
                  if [[ $CFILE == *"/aura/"*"."* ]]
                  then
                          echo if3
                          DIR=$(dirname "$CFILE")
                          tar cf - ../$DIR | (cd ../$DIRDEPLOY; tar xf -)
                  fi

                  case "$CFILE"
                  in
                          *.snapshot*) TYPENAME="AnalyticSnapshot";;
                          *.cls*) TYPENAME="ApexClass";;
                          *.component*) TYPENAME="ApexComponent";;
                          *.page*) TYPENAME="ApexPage";;
                          *.trigger*) TYPENAME="ApexTrigger";;
                          *.approvalProcess*) TYPENAME="ApprovalProcess";;
                          *.assignmentRules*) TYPENAME="AssignmentRules";;
                          */aura/*) TYPENAME="AuraDefinitionBundle";;
                          *.autoResponseRules*) TYPENAME="AutoResponseRules";;
                          *.community*) TYPENAME="Community";;
                          */applications*.app*) TYPENAME="CustomApplication";;
                          *.customApplicationComponent*) TYPENAME="CustomApplicationComponent";;
                          *.labels*) TYPENAME="CustomLabels";;
                          *.md*) TYPENAME="CustomMetadata";;
                          #*/objects/*__*__c.object*) TYPENAME="UNKNOWN TYPE" # We don't want objects from managed packages to be deployed;;
                          */objects*.object*) TYPENAME="CustomObject";;
                          *.objectTranslation*) TYPENAME="CustomObjectTranslation";;
                          *.weblink*) TYPENAME="CustomPageWebLink";;
                          *.customPermission*) TYPENAME="CustomPermission";;
                          *.tab*) TYPENAME="CustomTab";;
                          */documents/*.*) TYPENAME="Document";;
                          *.email*) TYPENAME="EmailTemplate";;
                          */email/*-meta.xml) TYPENAME="EmailTemplate";;
                          *.escalationRules*) TYPENAME="EscalationRules";;
                          *.globalValueSet*) TYPENAME="GlobalValueSet";;
                          *.globalValueSetTranslation*) TYPENAME="GlobalValueSetTranslation";;
                          *.group*) TYPENAME="Group";;
                          *.homePageComponent*) TYPENAME="HomePageComponent";;
                          *.homePageLayout*) TYPENAME="HomePageLayout";;
                          *.layout*) TYPENAME="Layout";;
                          *.letter*) TYPENAME="Letterhead";;
                          *.permissionset*) TYPENAME="PermissionSet";;
                          *.cachePartition*) TYPENAME="PlatformCachePartition";;
                          *.profile*) TYPENAME="Profile";;
                          *.reportType*) TYPENAME="ReportType";;
                          *.role*) TYPENAME="Role";;
                          *OrgPreference.settings*) TYPENAME="UNKNOWN TYPE";;
                          *.settings*) TYPENAME="Settings";;
                          */standardValueSets*.standardValueSet*) TYPENAME="StandardValueSet";;
                          *.standardValueSetTranslation*) TYPENAME="StandardValueSetTranslation";;
                          *.resource*) TYPENAME="StaticResource";;
                          *.translation*) TYPENAME="Translations";;
                          *.workflow*) TYPENAME="Workflow";;
                          *) TYPENAME="UNKNOWN TYPE";;
                  esac
                  echo $TYPENAME
                  if [[ "$TYPENAME" != "UNKNOWN TYPE" ]]
                  then
                          echo if3
                          case "$CFILE"
                          in
                                  src/email/*)  ENTITY="${CFILE#src/email/}";;
                                  src/documents/*)  ENTITY="${CFILE#src/documents/}";;
                                  src/aura/*)  ENTITY="${CFILE#src/aura/}" ENTITY="${ENTITY%/*}";;
                                  *) ENTITY=$(basename "$CFILE");;
                          esac
                          
                          if [[ $ENTITY == *"-meta.xml" ]]
                          then
                                  ENTITY="${ENTITY%%.*}"
                                  ENTITY="${ENTITY%-meta*}"
                          else
                                  ENTITY="${ENTITY%.*}"
                          fi
                          echo Akshay Code
                          cd src
                          if grep -Fq "&amp;amp;lt;name&amp;amp;gt;$TYPENAME&amp;amp;lt;/name&amp;amp;gt;" package.xml
                          then
                                  xmlstarlet ed -L -s "/Package/types[name='$TYPENAME']" -t elem -n members -v "$ENTITY" package.xml
                                  echo if6
                          else
                                  echo if7
                                  xmlstarlet ed -L -s /Package -t elem -n types -v "" package.xml
                                  xmlstarlet ed -L -s '/Package/types[not(*)]' -t elem -n name -v "$TYPENAME" package.xml
                                  xmlstarlet ed -L -s "/Package/types[name='$TYPENAME']" -t elem -n members -v "$ENTITY" package.xml
                          fi
                          if [[ "$TYPENAME" == "ApexClass" ]]
                          then
                                  echo copying class
                                  cp /home/runner/work/cicd/cicd/force-app/main/default/classes/"$ENTITY".cls /home/runner/work/cicd/cicd/pmdClass
                          fi
                                  
                          
                  fi
          done
          cd src
          pwd
          echo Cleaning up Package.xml
          xmlstarlet ed -L -i /Package -t attr -n xmlns -v "http://soap.sforce.com/2006/04/metadata" package.xml
          echo ====FINAL PACKAGE.XML=====
          cat package.xml
          sed '$i<version>52.0</version>' package.xml > finalpackage.xml
          echo =====Final Versioned Packege=====
          cat finalpackage.xml
          #pmd -d /home/runner/work/cicd/cicd/pmdClass -format text -R category/apex/design.xml  -reportfile /home/runner/work/cicd/cicd/pmdClass/Result56.txt
          
          
          cd /home/runner/work/cicd/cicd/pmd-bin-6.36.0/bin
          pwd
          ls -a
          bash run.sh pmd -d /home/runner/work/cicd/cicd/pmdClass -R /home/runner/work/cicd/cicd/pmd-bin-6.36.0/lib/ruleset.xml -f text -reportfile /home/runner/work/cicd/cicd/pmdClass/report39.txt -failOnViolation false
          mail -s 'PMD Report' you@cyberciti.biz < /home/runner/work/cicd/cicd/pmdClass/report39.txt
          
          cat /home/runner/work/cicd/cicd/pmdClass/report39.txt | mail -s "PMD" akshay.shar2021@gmail.com -a /home/runner/work/cicd/cicd/pmdClass/report39.txt
          cd /home/runner/work/cicd/cicd/pmdClass
          cat report39.txt
      - name: Install Salesforce CLI
        run: |
          npm install sfdx-cli
          node_modules/sfdx-cli/bin/run --version
          node_modules/sfdx-cli/bin/run plugins --core
      - name: Authenticate DevHub
        run: |
          echo "${SALESFORCE_JWT_SECRET_KEY}" > server.key
          node_modules/sfdx-cli/bin/run force:auth:jwt:grant --clientid ${{ secrets.SALESFORCE_CONSUMER_KEY }} --jwtkeyfile server.key --username ${{ secrets.SALESFORCE_DEVHUB_USERNAME}} --setdefaultdevhubusername -a devhub
        env:
          SALESFORCE_JWT_SECRET_KEY: ${{ secrets.SALESFORCE_JWT_SECRET_KEY }}
      - name: Test
        run: |
          pwd
          node_modules/sfdx-cli/bin/run force:source:deploy -x /home/runner/work/cicd/cicd/src/finalpackage.xml -u ${{ secrets.SALESFORCE_DEVHUB_USERNAME}} --checkonly > deploymentCheckResult.txt
          mail -s 'Deployment Report' akshay.shar2021@gmail.com < deploymentCheckResult.txt
          cat deploymentCheckResult.txt | mail -s "Deployment Result" akshay.shar2021@gmail.com -a deploymentCheckResult.txt
          #pmd -language apex -dir /home/runner/work/cicd/cicd/pmdClass -R category/apex/design.xml -rulesets /home/runner/work/cicd/cicd/pmd-bin-6.36.0/lib/ruleset.xml -f text -reportfile /home/runner/work/cicd/cicd/pmdClass/report39.txt
          #pmd -d /home/runner/work/cicd/cicd/pmdClass -R category/apex/design.xml -f text -reportfile /home/runner/work/cicd/cicd/pmdClass/report39.txt
          #pmd -language apex -d /home/runner/work/cicd/cicd/pmdClass -f text -R /home/runner/work/cicd/cicd/pmd-bin-6.36.0/lib/ruleset.xml -reportfile /home/runner/work/cicd/cicd/pmdClass/report39.txt
          #sudo bash run.sh pmd -d /home/runner/work/cicd/cicd/pmdClass -f text -R /home/runner/work/cicd/cicd/pmd-bin-6.36.0/lib/ruleset.xml -reportfile /home/runner/work/cicd/cicd/pmdClass/report39.txt
        
          


